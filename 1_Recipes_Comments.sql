drop table if exists recipes, comments cascade;


create table recipes
(
	id int primary key generated by default as identity,
	name text,
	description text,
	category text
);

create table comments
(
	id int primary key generated by default as identity,
	recipe_id int references recipes(id),
	content text,
	publish_date date
);

insert into recipes(name, description, category)
values
('Omelette', 'milk, eggs, salt, thats all', 'Breakfast'),
('Fried Egg', 'oil, eggs, salt, thats all', 'Breakfast'),
('Chicken Soup (Vega)', 'water, eggs, salt, thats all', 'Lunch');

insert into comments(recipe_id, content, publish_date)
values
(1, 'nice breakfast', '2024-01-01'),
(2, 'nice breakfast (very fast indeed)', '2024-01-02'),
(2, 'godlike food!!', '2024-01-03'),
(3, 'mmm water', '2024-01-05');

select * from recipes;

select * from comments;

select *
from recipes
         left join comments on recipes.id = comments.recipe_id;

select
  rec.id,
  rec.name,
  rec.description,
  rec.category,
  coalesce(json_agg(json_build_object(
    'id', com.id, 'content', com.content, 'publish date', com.publish_date))
      filter (where com.id is not null), '[]')
        as comments
from recipes rec
left join comments com on rec.id = com.recipe_id
group by rec.id
order by rec.id;
